{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hello!","text":"<p>Welcome to my writing samples and presentation. :)</p>"},{"location":"tutorials/smart-contracts-101/","title":"Smart Contracts 101: A Beginner's Guide using Coinbase SDK for in-game currency agreements","text":"","tags":["Crypto","Coinbase","Smart Contracts"]},{"location":"tutorials/smart-contracts-101/#introduction","title":"Introduction","text":"<p>The purpose of this blog post is to help those new to developing Blockchain technology understand Smart Contracts and how they would work in a general use case.</p> <p>You will learn:</p> <ul> <li> The rundown on Smart Contracts and their value</li> <li> How to create and deploy a token contract for in-game transactions (including a supply of Game tokens)</li> <li> How to interact with the contract in your game code</li> </ul> <p>Keep reading to learn how to apply Smart Contracts to an in-game purchase from a store.</p>","tags":["Crypto","Coinbase","Smart Contracts"]},{"location":"tutorials/smart-contracts-101/#prerequisites","title":"Prerequisites","text":"<p>It is assumed you have already completed the Getting Started guide. If so, you should have:</p> <ul> <li> An existing Coinbase account</li> <li> A configured API key</li> </ul> <p>This guide also assumes: </p> <ul> <li> You are running Python <code>v3.12.3+</code></li> <li> You have at least two funded wallets; One for a game player and another for the game shop</li> </ul>","tags":["Crypto","Coinbase","Smart Contracts"]},{"location":"tutorials/smart-contracts-101/#what-is-a-smart-contract","title":"What is a Smart Contract?","text":"<p>To help us understand Smart Contracts, we can draw an analogy using a developer concept you are likely familiar with: APIs. </p> <p>APIs (and more specifically, API Specs) are contracts between a client and server, which yield for some nice parallels. Both APIs and Smart Contracts:</p> Aspect APIs Smart Contracts Definition of rules/structure for how two parties interact Valid requests and expected responses Valid inputs and resulting actions Deterministic Server processes requests with predictable responses Executes transactions according to logic with predictable result Immutable and Versioned Versioning for backward compatibility. Once an API is deployed, developers rely on its stability Cannot be changed once deployed (similar to a fixed API version)","tags":["Crypto","Coinbase","Smart Contracts"]},{"location":"tutorials/smart-contracts-101/#the-value-of-smart-contracts","title":"The value of Smart Contracts","text":"<p>While APIs rely on a centralized server, a Smart Contract differs in that its true value is in the nature of its decentralized environment. Because Smart Contracts run on the blockchain, this means:</p> <ul> <li>Trustless Transactions: Because Smart Contracts are immutable, promises are unbreakable. Invested parties only need to trust in the code instead of asking, \"Can I trust this person?\"</li> <li>Transparent: A deployed contract can be inspected by anyone on the blockchain. </li> <li>Automated: Contract rules are enforced automatically without a middle man.</li> </ul> <p>At this point you can see how Smart Contracts might be useful for various agreements, whether for in-game currency transactions, or, for example, currency transactions when purchasing a home or insurance policy.</p>","tags":["Crypto","Coinbase","Smart Contracts"]},{"location":"tutorials/smart-contracts-101/#tools-used","title":"Tools used","text":"<ul> <li>Coinbase Developer Platform (CDP): Tools and APIs for developers to integrate Coinbase services into decentralized applications, enabling easy management of crypto assets, transactions, and more</li> <li>CDP MPC Wallet API: Create and manage cryptocurrency wallets, enabling secure storage and transactions of digital assets</li> <li>CDP Transfers API: Provides programmatic access to initiate, monitor, and manage cryptocurrency transfers, allowing integration of payments and transfers into applications</li> <li>CDP Portal: Web interface where developers can manage their projects, access API documentation, and configure their API keys and other settings for integration with Coinbase\u2019s services</li> </ul> <p>While Smart Contracts come in multiple flavors, this guide will be using <code>ERC20</code> format.</p> What Smart Contract formats are available? <ul> <li>ERC20: A contract that keeps track of fungible tokens (any one token is exactly equal to any other token)</li> <li>ERC721: A contract that keeps track of non-fungible tokens (where each token is unique, i.e., real estate or collectibles)</li> <li>ERC777: ERC20, but with more sophisticated interactions via hooks and abstraction/simplification of token interactions.</li> <li>ERC1155: Agnostic (fungible and non-fungible) contract with support for multiple types of tokens per contract.</li> </ul> <p>Read more in the Open Zeppelin docs.</p>","tags":["Crypto","Coinbase","Smart Contracts"]},{"location":"tutorials/smart-contracts-101/#typical-contract-deployment-workflow","title":"Typical contract deployment workflow","text":"","tags":["Crypto","Coinbase","Smart Contracts"]},{"location":"tutorials/smart-contracts-101/#without-cdp-sdk","title":"Without CDP SDK","text":"<p>Typically, to create and deploy an ERC20 Smart Contract involves many steps:</p> <ol> <li>Creating the Solidity contract code</li> <li>Implementing its required functions (<code>totalSupply</code>, <code>balanceof</code>, <code>transfer</code>, <code>approve</code>, <code>transferFrom</code>, etc. OpenZeppelin offers these as a part of their implementation) and any custom features</li> <li>Compiling the contract into bytecote for the Ethereum Virtual Machine (EVM) to execute</li> <li>Deploy the contract </li> <li>Finally, interact with the contract</li> </ol> <p>As a recommendation, these steps should also include testing (using tools like <code>brownie</code> or <code>truffle</code>, creating unit tests, and running test deployments to a testnet).</p> What does an ERC20 contract look like? <p>As an example, take a look at this (simplified) basic, bare bones example. Contracts are written using the Solidity programming language. We will continue going into the details throughout the rest of the tutorial, so don't focus on that too much. This is just to give you a general idea.</p> SimpleToken.sol<pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleToken {\n    string public name = \"SimpleToken\";\n    string public symbol = \"STK\";\n    uint8 public decimals = 18;\n    uint256 public totalSupply;\n    mapping(address =&gt; uint256) public balanceOf;\n\n    constructor(uint256 _initialSupply) {\n        totalSupply = _initialSupply * 10 ** uint256(decimals);\n        balanceOf[msg.sender] = totalSupply;\n    }\n\n    function transfer(address _to, uint256 _amount) public returns (bool) {\n        require(balanceOf[msg.sender] &gt;= _amount, \"Insufficient balance\");\n        balanceOf[msg.sender] -= _amount;\n        balanceOf[_to] += _amount;\n        return true;\n    }\n\n    ...\n}\n</code></pre> <p>Keep reading and we will compare why the CDP SDK makes this process much easier.</p>","tags":["Crypto","Coinbase","Smart Contracts"]},{"location":"tutorials/smart-contracts-101/#with-cdp-sdk","title":"With CDP SDK","text":"<p>See how intensive a typical workflow is when creating even a basic Smart Contract? This is where the CDP SDK can help alleviate you of those pains.</p> <p>Coinbase provides SDKs and APIs to help simplify blockchain development which you can use to streamline the process and focus on other functionality.</p> <p>Using Coinbase, you can create and deploy a Smart Contract with very minimal coding, leading to:</p> <ul> <li>Easier use and faster development: Skip time-consuming steps of writing contracts manually</li> <li>Reduced risk: Coinbase is a well-tested SDK which will help you avoid common errors or vulnerabilities</li> <li>Focus on innovation: Spend less time on low-level blockchain details since Coinbase abstracts much of this complexity away</li> <li>Scalability: Coinbase tools are designed to scale with your project, making it easier to grow with your user base</li> </ul> <p>Let's get started.</p>","tags":["Crypto","Coinbase","Smart Contracts"]},{"location":"tutorials/smart-contracts-101/#step-1-create-and-deploy-a-smart-contract","title":"Step 1 -- Create and deploy a Smart Contract","text":"<p>That's right, it's just one step to create and deploy a Smart Contract using CDP's Wallet API.</p> <p>Using a new or existing wallet, you can call Coinbase's <code>deploy_token</code> function which takes 3 parameters:</p> <ul> <li>A token name</li> <li>A token symbol</li> <li>Initial supply</li> </ul> <p>And that's it!</p> Why do I need to create a token with the contract? <p>A Smart Contract needs tokens because the contract defines rules and behavior for transacting these tokens on the Ethereum blockchain. The ERC20 standard provides a set of functions that allow creation, transfer, or tracking of tokens within the Ethereum ecosystem. The Open Zeppelin implementation provides these out of the box and is inherited under-the-hood in the Coinbase API:</p> <ul> <li><code>totalSupply</code>: The total number of tokens that will ever exist</li> <li><code>balanceOf</code>: Returns the value of tokens owned by an account</li> <li><code>transfer</code>: Moves tokens from caller account to another account</li> <li><code>allowance</code>: Returns remaining number of tokens a spender is allowed to spend on behalf of the owner</li> <li><code>approve</code>: Sets an allowance of a spender</li> <li><code>transferFrom</code>: Moves a set amount of tokens from and to an address.</li> </ul> <p>See more information in the Open Zeppelin API Reference.</p> <p>Creating tokens allows for a digital asset that can be used for in-game items, currency, and rewards. It also enables tokens to be integrated into decentralized exchanges, wallets, and other Ethereum applications across the ecosystem. </p> <p>As an example, let's assume you have already created (and funded) a wallet or imported an existing one. </p> <p>Once you define your token name, symbol, and initial supply, you can deploy the token as is:</p> <pre><code>deployed_contract = wallet.deploy_token(\"GameCoin\", \"GAME\". 100000)\ndeployed_contract.wait()\n</code></pre> <p>This will:</p> <ul> <li>Initialize your token named <code>GameCoin</code> with a symbol of <code>GAME</code> and a cap of <code>100,000</code> tokens</li> <li>Deploy the ERC20 token contract </li> </ul> <p>All other required ECR20 functions are provided for you out of the box, as described in <code>\"What Smart Contract formats are available?\"</code> above.</p>","tags":["Crypto","Coinbase","Smart Contracts"]},{"location":"tutorials/smart-contracts-101/#step-2-verify-deployment-in-cdp-portal","title":"Step 2 -- Verify deployment in CDP Portal","text":"<p>Coinbase provides a nice dashboard of all your deployed contracts. Here, you can access your deployed contract addresses, or modify basic configuration such as the Contract name. </p> <p>Once your new token contract has been deployed, you should see it here.</p> <p></p>","tags":["Crypto","Coinbase","Smart Contracts"]},{"location":"tutorials/smart-contracts-101/#step-3-inspect-the-public-contract-with-a-block-explorer","title":"Step 3 -- Inspect the public contract with a block explorer","text":"<p>Now that your <code>GameCoin</code> token contract has been deployed, it is now visible to you, game players, or anyone else using the public internet!</p> <p>Using a Block Explorer, you can transparently view and interact with your new contract or other onchain data. </p> <p>Check out the Sepola Base Scan Block Explorer to verify that you can see the token contract at the address you obtained from the CDP Portal:</p> <p></p>","tags":["Crypto","Coinbase","Smart Contracts"]},{"location":"tutorials/smart-contracts-101/#step-4-interact-with-contract-from-game-code","title":"Step 4 -- Interact with contract from game code","text":"<p>Let's put this use case in terms of our real-world example: in-game currency! </p> <p>We want to give players the ability to buy items using our new <code>GameCoin</code>. This means that whenever a player purchases an item from our store, we need to interact with our token contract to handle the transfer.</p>","tags":["Crypto","Coinbase","Smart Contracts"]},{"location":"tutorials/smart-contracts-101/#using-cdp-wallet-api-with-invoke_contract","title":"Using CDP Wallet API with <code>invoke_contract</code>","text":"<p>Assuming you have a persisted wallet, using the deployed token contract address you could define a buy_item function like so:</p> game.py<pre><code>def buy_item(player_wallet, contract_address, item_price, shop_address):\n\n    # A correctly formatted player's wallet address is needed to interact with the smart contract \n    player_address = player_wallet.default_address.address_id\n\n    # 1: Check player's token balance\n    balance = player_wallet.invoke_contract(\n        contract_address=contract_address,  \n        method=\"balanceOf\",                 \n        args={\"account\": player_address}    \n    )\n\n    # Tokens are often in the smallest unit (like wei for Ethereum-based tokens).\n    balance_in_tokens = balance / (10**18)  # Convert from wei to human-readable tokens\n\n    if balance_in_tokens &lt; item_price:\n        print(f\"Not enough tokens to buy this item! Current balance: {balance_in_tokens}, Item price: {item_price}\")\n        return False\n\n    # 2: Approve the contract to spend the player's tokens \n    approval = player_wallet.invoke_contract(\n        contract_address=contract_address,  # Address of the token contract\n        method=\"approve\",                   # Approve method for spending tokens\n        args={\"spender\": shop_address, \"value\": item_price}  # Allow shop to spend item price\n    )\n    approval.wait()  # Wait for approval transaction confirmation\n\n    # 3: Transfer tokens to the shop's wallet address\n    transfer = player_wallet.invoke_contract(\n        contract_address=contract_address,  # Token contract address\n        method=\"transferFrom\",              # Method to transfer tokens from player \n        args={\n            \"from\": player_address,         # Player's address\n            \"to\": shop_address,             # Shop's address\n            \"value\": item_price             # Item price in tokens\n        }\n    )\n    transfer.wait()  # Wait for the transfer transaction confirmation\n\n    # 4: Confirm the purchase\n    print(\"Item purchased successfully!\")\n    return True\n</code></pre> <p>Important</p> <p>Note <code>invoke_contract</code> being used on the player's wallet. This is a part of the CDP API. All ERC20 functions are built-in and ready to use out of the box. Read more in Smart Contract Deployments.</p>","tags":["Crypto","Coinbase","Smart Contracts"]},{"location":"tutorials/smart-contracts-101/#using-cdp-transfers-api","title":"Using CDP Transfers API","text":"<p>Alternatively, for simple transfers, you can also use the Coinbase Transfers API:</p> <pre><code>def buy_item_with_transfer(player_wallet, contract_address, item_price):\n\n    player_address = player_wallet.default_address.address_id  \n\n    # Create a gasless USDC transfer on Base Mainnet\n    transfer = player_wallet.transfer(\n    0.01,\n    \"usdc\",\n    another_wallet,\n    gasless=True,\n    )\n\n    # Gasless transfer 0.00001 Ether to the destination address.\n    transfer = wallet.transfer(0.00001, \"eth\", another_wallet, gasless=True)\n\n    # Wait for the transfer to settle.\n    transfer.wait()\n</code></pre> What is a gasless transfer? <p>A gasless transfer refers to a transaction on a blockchain where the user does not have to pay for the gas fees (transaction fees). Typically, when interacting with smart contracts on blockchains like Ethereum, users need to pay gas fees to process transactions. </p>","tags":["Crypto","Coinbase","Smart Contracts"]},{"location":"tutorials/smart-contracts-101/#what-to-read-next","title":"What to read next","text":"<p>Hopefully this gave you a better understanding of how to use a Smart Contract in a real life scenario!</p> <p>Continue reading for more information:</p> <ul> <li>Transfers API: Send an asset from one wallet to another</li> <li>Deploying an ERC20 with Coinbase SDK: How to deploy an ERC20 contract using Coinbase SEK</li> <li>MPC Wallets: Distributed key management across multiple entities, reducing the risk of key theft or loss</li> <li>Network Labels: Handy for configurations</li> <li>Smart Contract Events SDK: Endpoints for Smart Contract actions</li> </ul>","tags":["Crypto","Coinbase","Smart Contracts"]},{"location":"welcome/backend-create-wallet/","title":"Create your first wallet and transact funds","text":""},{"location":"welcome/backend-create-wallet/#introduction","title":"Introduction","text":"<p>The CDP SDK allows you to create wallets and send funds onchain within minutes.\u00a0</p> <p>In this quickstart, you will learn:</p> <ul> <li> How to create a Developer-Managed wallet</li> <li> Fund the wallet with testnet ETH (for experimentation using a simulated ETH network)</li> <li> Transfer funds between wallets</li> <li> Trade assets  </li> </ul>"},{"location":"welcome/backend-create-wallet/#prerequisites","title":"Prerequisites","text":"<p>You must meet the following requirements before continuing:</p> <ul> <li>Completed installation and setup of <code>cdp-sdk</code></li> <li>Python 3.10 or higher</li> </ul> <p>It is assumed that you already have an API key as a part of installing and setting up the SDK.</p>"},{"location":"welcome/backend-create-wallet/#step-1-initialize-the-cdp-sdk","title":"Step 1 -- Initialize the CDP SDK","text":"<p>Create a Python script and paste the following:  </p> wallet.py<pre><code>from cdp import *\n\n# Paste in your API key name and private key\napi_key_name = \"\"\napi_key_private_key = \"\"\n\nCdp.configure(api_key_name, api_key_private_key)\n\n# Alternatively, you can source the API key directly from a file downloaded from the CDP portal:\n# Cdp.configure_from_json(\"~/Downloads/cdp_api_key.json\")\n\nprint(\"CDP SDK has been successfully configured.\")\n</code></pre> <p>Here, we have the option to pass the API key name and private key or pass in the API key file directly.</p>"},{"location":"welcome/backend-create-wallet/#step-2-create-a-wallet","title":"Step 2 -- Create a wallet","text":"<p>Now that the SDK has been initialized, we can create a wallet. Add the following to your script.</p> wallet.py<pre><code># Create a wallet with one address by default\nwallet = Wallet.create()\n\n# Access the wallet's default address\naddress = wallet.default_address\n\nprint(f\"Wallet successfully created: {wallet}\")\n</code></pre> <p>Warning</p> <p>To prevent losing access to your wallet, make sure you persist the wallet. Wallets are not persisted by default.</p>"},{"location":"welcome/backend-create-wallet/#step-3-fund-the-wallet","title":"Step 3 -- Fund the wallet","text":"<p>The wallet you created is empty by default. Let's add some funds. </p> <p>For Base Sepolia testnet, we provide a faucet method to fund your wallet with testnet ETH. Add the following to your script:</p> wallet.py<pre><code># Fund the wallet with a faucet transaction.\nfaucet_tx = wallet1.faucet()\n\n# Wait for faucet transaction to land on-chain.\nfaucet_tx.wait()\n\nprint(f\"Faucet transaction successfully completed: {faucet_tx}\")\n</code></pre>"},{"location":"welcome/backend-create-wallet/#step-4-transfer-funds","title":"Step 4 -- Transfer funds","text":"<p>Now that your faucet transaction has funded your wallet, you can transfer funds to another wallet. </p> <p>Add the code below to your script.</p> wallet.py<pre><code># Create a new wallet to which we will transfer funds.\nanother_wallet = Wallet.create()\n\nprint(f\"Wallet successfully created: {another_wallet}\")\n\n# Tranfer ETH from our original wallet and into the new wallet\ntransfer = wallet.transfer(0.00001, \"eth\", another_wallet).wait()\n\nprint(f\"Transfer successfully completed: {transfer}\")\n</code></pre>"},{"location":"welcome/backend-create-wallet/#step-5-test","title":"Step 5 -- Test","text":"<p>At this point, your script should contain the following:</p> wallet.py<pre><code>from cdp import *\n\n# Paste in your API key name and private key\napi_key_name = \"\"\napi_key_private_key = \"\"\n\nCdp.configure(api_key_name, api_key_private_key)\n\n# Alternatively, you can source the API key directly from a file downloaded from the CDP portal:\n# Cdp.configure_from_json(\"~/Downloads/cdp_api_key.json\")\n\nprint(\"CDP SDK has been successfully configured.\")\n\n# Create a wallet with one address by default\nwallet = Wallet.create()\n\n# Access the wallet's default address\naddress = wallet.default_address\n\nprint(f\"Wallet successfully created: {wallet}\")\n\n# Fund the wallet with a faucet transaction.\nfaucet_tx = wallet.faucet()\n\n# Wait for faucet transaction to land on-chain.\nfaucet_tx.wait()\n\nprint(f\"Faucet transaction successfully completed: {faucet_tx}\")\n\n# Create a new wallet to which we will transfer funds.\nanother_wallet = Wallet.create()\n\nprint(f\"Wallet successfully created: {another_wallet}\")\n\n# Tranfer ETH from our original wallet and into the new wallet\ntransfer = wallet.transfer(0.00001, \"eth\", another_wallet).wait()\n\nprint(f\"Transfer successfully completed: {transfer}\")\n</code></pre> <p>Run your script and observe its output. You should see similar output:</p> <pre><code>CDP SDK has been successfully configured.\nWallet successfully created: Wallet: (id: 72126803-5d32-4742-b2fa-8b827f0a52e2, network_id: base-sepolia, server_signer_status: None)\nFaucet transaction successfully completed: FaucetTransaction: (transaction_hash: 0x2c5ea6c2b0a8a49579155058831c45da0e0640cb16f532b832c7bca744146832, transaction_link: https://sepolia.basescan.org/tx/0x2c5ea6c2b0a8a49579155058831c45da0e0640cb16f532b832c7bca744146832, status: complete, network_id: base-sepolia)\nWallet successfully created: Wallet: (id: 081a99f6-7b87-455a-a533-f9c971561e83, network_id: base-sepolia, server_signer_status: None)\nTransfer successfully completed: Transfer: (transfer_id: ce6c6135-1b9e-4588-97ee-c953281b3c08, network_id: base-sepolia, from_address_id: 0x9E0E8d7eA52478790F1ec2145Db747fE858926dd, destination_address_id: 0x236447789d2622bf403026227Ad356D74ba62239, asset_id: eth, amount: 0.00001, transaction_link: https://sepolia.basescan.org/tx/0xeae6dcc43b6fda764638a49887d28007562534b49b674021a91ebfb53ba7eed1, status: complete)\n</code></pre> <p>We can see that our first wallet was created and funded using a faucet transaction.</p> <p>Our secondary wallet, <code>081a99f6-...</code> was also successfully created, with a completed transaction.</p>"},{"location":"welcome/backend-create-wallet/#step-6-trade-assets","title":"Step 6 -- Trade assets","text":"<p>On\u00a0<code>base-mainnet</code>\u00a0you can trade between different assets from your wallet. </p> <p>Since trading is only supported on mainnet wallets, wallet should be funded with real assets before trading. The code below creates a wallet and trades some ETH to USDC and then all of the USDC to WETH:</p> <pre><code># Create a wallet on `base-mainnet` to trade assets with.\nwallet = Wallet.create(network_id=\"base-mainnet\")\n\nprint(\"Wallet successfully created: {wallet}\")\n\n# Fund wallet's default address with ETH from an external source.\n\n# Trade 0.00001 ETH to USDC\ntrade = wallet.trade(0.00001, \"eth\", \"usdc\").wait()\n\nif trade.status is Transaction.Status.COMPLETE:\n  print(f\"Trade successfully completed: {trade}\")\nelse:\n  print(f\"Trade failed on-chain: {trade}\")\n\n# Trade the wallet's full balance of USDC to WETH\ntrade2 = wallet.trade(wallet.balance(\"usdc\"), \"usdc\", \"weth\").wait()\n\nif trade2.status is Transaction.Status.COMPLETE:\n  print(f\"Second trade successfully completed: {trade2}\")\nelse:\n  print(f\"Second trade failed on-chain: {trade}\")\n</code></pre>"},{"location":"welcome/backend-create-wallet/#what-to-read-next","title":"What to read next","text":"<ul> <li>Trades: Convert one asset into a different asset</li> <li>Transfers: Send an asset from wallet or address to another</li> <li>Persisting a Wallet: A new wallet is not persisted by default. Learn more on how to persist a wallet.</li> </ul>"},{"location":"welcome/getting-started/","title":"Develop with Coinbase: Getting Started","text":""},{"location":"welcome/getting-started/#introduction","title":"Introduction","text":"<p>This guide will guide you through getting started with Coinbase development.</p> <p>You will:</p> <ul> <li> Install the backend or frontend Coinbase SDK.</li> <li> Create a Coinbase Developer Platform API key</li> </ul> <p>Note</p> <p>For the sake of brevity, I'm only covering the CDP Python setup. From here on out,  guides assume you are using Python.</p>"},{"location":"welcome/getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher</li> <li>An existing Coinbase Developer Platform account</li> </ul>"},{"location":"welcome/getting-started/#step-1-select-an-sdk-to-install","title":"Step 1 -- Select an SDK to install","text":""},{"location":"welcome/getting-started/#backend-cdp-sdk","title":"Backend: CDP SDK","text":"<p>Use the Coinbase Developer Platform (CDP) SDK to store, send, trade, and stake your assets.</p> <p>The CDP SDK currently supports Typescript and Ruby.</p>"},{"location":"welcome/getting-started/#usage","title":"Usage","text":"<ul> <li>Create your own secure MPC wallets </li> <li>Access onchain data, a Base Sepotia faucet, and transfer USDC for free</li> <li>Leverage crypto functions (transfer, stake, or trade)</li> <li>Use Webhooks to receive real-time onchain notifications</li> </ul>"},{"location":"welcome/getting-started/#installation","title":"Installation","text":"<p>Install the CDP SDK using <code>pip</code>:</p> <pre><code>pip install cdp-sdk\n</code></pre>"},{"location":"welcome/getting-started/#frontend-onchain-kit","title":"Frontend: Onchain Kit","text":"<p>Build onchain apps with ready-to-use React components and Typescript utilities. </p>"},{"location":"welcome/getting-started/#usage_1","title":"Usage","text":"<ul> <li>Create or connect your wallet with Smart Wallet</li> <li>Sponsor onchain transactions with Paymaster</li> <li>Swap tokens using the Swap components</li> <li>Display Basenames and ENS avatars, names, and addresses</li> </ul>"},{"location":"welcome/getting-started/#installation_1","title":"Installation","text":"<p>(I only covered CDP SDK for python) </p>"},{"location":"welcome/getting-started/#step-2-create-a-cdp-api-key","title":"Step 2 -- Create a CDP API key","text":"<p>Assuming you are already signed in, create an API key from the CDP portal.</p> <p>Click the Create API key button under the API Keys tab:</p> <p></p> <p>Give the key a name. Under API-specific restrictions check View, Trade, and Transfer.</p> <p>Once complete, click Create &amp; download to create the API key.</p> <p>You should store the key name and secret in a safe place (i.e., a secrets manager or environment variables).</p>"},{"location":"welcome/getting-started/#what-to-read-next","title":"What to read next","text":"<ul> <li>CDP SDK: Create a wallet and transact funds: Create a wallet and send onchain funds in minutes</li> </ul>"}]}